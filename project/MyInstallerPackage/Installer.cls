Class MyInstallerPackage.Installer
{

XData setup [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Var Name="NAMESPACE" Value="DEMO"/>
<Namespace Name="${NAMESPACE}" Create="overwrite" Code="${NAMESPACE}" Data="${NAMESPACE}" Ensemble="0">
	<Configuration>
	<Database Name="${NAMESPACE}" Create="overwrite" Dir="/home/irisowner/${NAMESPACE}" InitialSize="1"/>
	</Configuration>
	<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
		<Arg Value="/home/irisowner/iris" />
		<Arg Value="" />
		<Arg Value="ck" />
		<Arg Value=".e" />
		<Arg Value="1" />
	</Invoke>
</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setupMethod(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, 
    %code, "setup")
}

ClassMethod setup(ByRef tVars) As %Status
{
  Set tSC='$$$OK
  Try {

	$$$THROWONERROR(tSC,..setupMethod(.tVars))
	New $NAMESPACE
	Set $NAMESPACE="%SYS"

	Set tSC=##class(Security.Users).UnExpireUserPasswords("*") 
	$$$ThrowOnError(tSC)

	#; Enable CallIn
	Set p("Enabled")=1 
	Set p("AutheEnabled")=32   // allow password authentication only
	Set tSC=##class(Security.Services).Modify("%Service_CallIn", .p) 
	$$$ThrowOnError(tSC)

	#; Change default namespace of "_SYSTEM" user to "DEMO"
	Set p("NameSpace")="DEMO"
	Set tSC=##class(Security.Users).Modify("_SYSTEM", .p)
	$$$ThrowOnError(tSC)

	#; Initial data
	Set $NAMESPACE="DEMO"
	Set ^test="abc" For i=1:1:10 { Set ^test(i)=i } 

  	Set tSC=$$$OK
  } Catch(e) {
	  Set tSC=e.AsStatus()
  }
  Return tSC
}

}
